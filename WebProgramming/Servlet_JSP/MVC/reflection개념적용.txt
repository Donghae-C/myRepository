ex) 프로젝트 한다고 생각?
 1)회원관리
   -가입 : XxxController
   -로그인 : XxxController
   -로그아웃 : XxxController
   -정보수정 : XxxController

 2)상품관리
   -등록 : XxxController
   -검색 : XxxController
   -부분검색 : XxxController
   -수정 : XxxController
   -삭제

3)게시판관리
    -글등록
    -전체검색
    -상세보기
    -수정
    -댓글달기
-------------------------------------------
1)회원관리 : XxxController
   -가입메소드
   -로그인메소드
   -로그아웃메소드
   -정보수정메소드

 2)상품관리 : XxxController
   -등록메소드
   -검색메소드
   -부분검색메소드
   -수정메소드
   -삭제메소드

3)게시판관리 : XxxController
    -글등록메소드
    -전체검색메소드
    -상세보기메소드
    -수정메소드
    -댓글달기메소드
 
--------------------------------------------------------
* 뷰에서 요청할때
   ex) front?key=insert&methodName=login
        : parameter의 정보중에 key는 어떤 XxxController인지를 찾아주는 정보 
                                      methodName은 찾은 XxxController의 어떤 메소드를 호출해야하는지를 찾아주는 정보 


     * 원래 자바는 개발할때(코딩) 미리 객체를 생성하고 생성된 객체의 메소드를 호출를 해놓는다.
       현재 상황은 각 XxxController의 메소드가 언제 어떻게 호출될지 알수 없기때문에 
      미리 객체의 메소드를 호출해 놓을수 없다!!! 문제이다.
      그래서, 실행도중에 즉 동적으로 상황에 따라 적절하게 메소드가 호출될수 있도록 해야한다.
      이런 개념을 reflection개념이라고 하고 이것을 가능하도록 도와주는 java API가 Class<?> 이다 


   - Java Reflection 정리
    런타임에 클래스, 메소드, 필드, 생성자 등 Java 객체의 메타데이터에 접근하고 조작할 수 있다.
    Class<?>
주요 개념
  1) Class 클래스 : Reflection의 중심 클래스로 Class 객체를 통해 클래스 정보를 가져올 수 있다.
                        ex) Class.forName("com.example.MyClass")를 사용하여 특정 클래스를 로드함

  2) 메소드 정보 : Method 클래스를 사용하여 클래스의 메소드를 찾고 호출할 수 있다.
                        ex) getDeclaredMethod() 메소드를 사용하여 특정 메소드를 가져올 수 있음.

 3) Field 정보 : Field 클래스를 사용하여 클래스의 필드에 대한 정보를 얻고, 필드 값을 읽거나 쓸 수 있다.
                     getDeclaredField() 메소드를 통해 특정 필드를 가져올 수 있음

 4) 생성자 정보 : Constructor 클래스를 사용하여 클래스의 생성자를 찾고 인스턴스를 생성할 수 있다.
                        getDeclaredConstructor() 메소드를 사용

 5) 접근 제어 : Reflection을 사용하면 private 필드나 메소드에도 접근할 수 있다. 하지만 보안 문제로 인해 주의가 필요.
                    setAccessible(true)를 호출하여 접근을 허용할 수 있음.


- 장점
   동적인 프로그래밍: 런타임에 객체의 구조를 알 수 있어 유연한 설계가 가능.
   다양한 라이브러리와 프레임워크에서 활용 (예: Spring, Hibernate).

- 단점
   성능 저하 -  Reflection은 일반적인 메소드 호출보다 느림
   타입 안전성 감소 - 컴파일 시점에 타입 체크를 하지 않기 때문에 오류가 런타임에서 발생할 수 있음.
   보안 문제 -  비공식적인 접근을 허용하여 보안 취약점을 만들 수 있음.















